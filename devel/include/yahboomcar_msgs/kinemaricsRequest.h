// Generated by gencpp from file yahboomcar_msgs/kinemaricsRequest.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSREQUEST_H
#define YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct kinemaricsRequest_
{
  typedef kinemaricsRequest_<ContainerAllocator> Type;

  kinemaricsRequest_()
    : kin_name()
    , src_pos()
    , src_joints()  {
    }
  kinemaricsRequest_(const ContainerAllocator& _alloc)
    : kin_name(_alloc)
    , src_pos(_alloc)
    , src_joints(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _kin_name_type;
  _kin_name_type kin_name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _src_pos_type;
  _src_pos_type src_pos;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _src_joints_type;
  _src_joints_type src_joints;





  typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct kinemaricsRequest_

typedef ::yahboomcar_msgs::kinemaricsRequest_<std::allocator<void> > kinemaricsRequest;

typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsRequest > kinemaricsRequestPtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsRequest const> kinemaricsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.kin_name == rhs.kin_name &&
    lhs.src_pos == rhs.src_pos &&
    lhs.src_joints == rhs.src_joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d98542383cb1edcabb109de87c11a93b";
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd98542383cb1edcaULL;
  static const uint64_t static_value2 = 0xbb109de87c11a93bULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/kinemaricsRequest";
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# request\n"
"string  kin_name\n"
"float64[] src_pos\n"
"float64[] src_joints\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.kin_name);
      stream.next(m.src_pos);
      stream.next(m.src_joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kinemaricsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::kinemaricsRequest_<ContainerAllocator>& v)
  {
    s << indent << "kin_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.kin_name);
    s << indent << "src_pos[]" << std::endl;
    for (size_t i = 0; i < v.src_pos.size(); ++i)
    {
      s << indent << "  src_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.src_pos[i]);
    }
    s << indent << "src_joints[]" << std::endl;
    for (size_t i = 0; i < v.src_joints.size(); ++i)
    {
      s << indent << "  src_joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.src_joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSREQUEST_H
