// Generated by gencpp from file yahboomcar_msgs/kinemaricsResponse.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSRESPONSE_H
#define YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct kinemaricsResponse_
{
  typedef kinemaricsResponse_<ContainerAllocator> Type;

  kinemaricsResponse_()
    : target_joints()
    , target_pos()  {
    }
  kinemaricsResponse_(const ContainerAllocator& _alloc)
    : target_joints(_alloc)
    , target_pos(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_joints_type;
  _target_joints_type target_joints;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _target_pos_type;
  _target_pos_type target_pos;





  typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct kinemaricsResponse_

typedef ::yahboomcar_msgs::kinemaricsResponse_<std::allocator<void> > kinemaricsResponse;

typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsResponse > kinemaricsResponsePtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::kinemaricsResponse const> kinemaricsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.target_joints == rhs.target_joints &&
    lhs.target_pos == rhs.target_pos;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "170f5924f3c20248527b77c395783981";
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x170f5924f3c20248ULL;
  static const uint64_t static_value2 = 0x527b77c395783981ULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/kinemaricsResponse";
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# response\n"
"float64[] target_joints\n"
"float64[] target_pos\n"
"\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_joints);
      stream.next(m.target_pos);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kinemaricsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::kinemaricsResponse_<ContainerAllocator>& v)
  {
    s << indent << "target_joints[]" << std::endl;
    for (size_t i = 0; i < v.target_joints.size(); ++i)
    {
      s << indent << "  target_joints[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_joints[i]);
    }
    s << indent << "target_pos[]" << std::endl;
    for (size_t i = 0; i < v.target_pos.size(); ++i)
    {
      s << indent << "  target_pos[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.target_pos[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_KINEMARICSRESPONSE_H
