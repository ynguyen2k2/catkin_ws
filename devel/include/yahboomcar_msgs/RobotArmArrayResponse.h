// Generated by gencpp from file yahboomcar_msgs/RobotArmArrayResponse.msg
// DO NOT EDIT!


#ifndef YAHBOOMCAR_MSGS_MESSAGE_ROBOTARMARRAYRESPONSE_H
#define YAHBOOMCAR_MSGS_MESSAGE_ROBOTARMARRAYRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace yahboomcar_msgs
{
template <class ContainerAllocator>
struct RobotArmArrayResponse_
{
  typedef RobotArmArrayResponse_<ContainerAllocator> Type;

  RobotArmArrayResponse_()
    : angles()  {
    }
  RobotArmArrayResponse_(const ContainerAllocator& _alloc)
    : angles(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _angles_type;
  _angles_type angles;





  typedef boost::shared_ptr< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmArrayResponse_

typedef ::yahboomcar_msgs::RobotArmArrayResponse_<std::allocator<void> > RobotArmArrayResponse;

typedef boost::shared_ptr< ::yahboomcar_msgs::RobotArmArrayResponse > RobotArmArrayResponsePtr;
typedef boost::shared_ptr< ::yahboomcar_msgs::RobotArmArrayResponse const> RobotArmArrayResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator2> & rhs)
{
  return lhs.angles == rhs.angles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator1> & lhs, const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace yahboomcar_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7ca77b9da2dfe623a276e10b570d2df";
  }

  static const char* value(const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7ca77b9da2dfe62ULL;
  static const uint64_t static_value2 = 0x3a276e10b570d2dfULL;
};

template<class ContainerAllocator>
struct DataType< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "yahboomcar_msgs/RobotArmArrayResponse";
  }

  static const char* value(const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#response\n"
"float64[] angles\n"
"\n"
;
  }

  static const char* value(const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.angles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmArrayResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::yahboomcar_msgs::RobotArmArrayResponse_<ContainerAllocator>& v)
  {
    s << indent << "angles[]" << std::endl;
    for (size_t i = 0; i < v.angles.size(); ++i)
    {
      s << indent << "  angles[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.angles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // YAHBOOMCAR_MSGS_MESSAGE_ROBOTARMARRAYRESPONSE_H
